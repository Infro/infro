/*
using System.Runtime.CompilerServices;

namespace infro.github.io
{
    [InterpolatedStringHandler]
    public ref struct StructuredLoggingErrorInterpolatedStringHandler
    {
        private readonly StructuredLoggingInterpolatedStringHandler _handler;

        public StructuredLoggingErrorInterpolatedStringHandler(int literalLength, int formattedCount, ILogger logger, out bool isEnabled)
        {
            _handler = new StructuredLoggingInterpolatedStringHandler(literalLength, formattedCount, logger, LogLevel.Error, out isEnabled);
        }

        public bool IsEnabled => _handler.IsEnabled;

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AppendLiteral(string s) => _handler.AppendLiteral(s);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void AppendFormatted<T>(T value, [CallerArgumentExpression("value")] string name = "") => _handler.AppendFormatted(value, name);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public (string, object?[]) GetTemplateAndArguments() => _handler.GetTemplateAndArguments();
    }

    public static partial class Extensions
    {
        public static void LogError(this ILogger logger, [InterpolatedStringHandlerArgument("logger")] ref StructuredLoggingErrorInterpolatedStringHandler handler)
        {
            if (handler.IsEnabled)
            {
                var (template, arguments) = handler.GetTemplateAndArguments();
                logger.LogError(template, arguments);
            }
        }
    }
}

//git clone https://github.com/fedarovich/interpolated-logging-demo
*/