@page "/scheduleMeeting"
@inject HttpClient Http

<PageTitle>Select a date and time and method of contact.</PageTitle>
@* https://blazor.syncfusion.com/documentation/scheduler/editor-template *@
@* Can Import/Export ICS files TheScheudler.Import,,, What about single events? *@
<h1>Schedule</h1>
<EditForm>
    <InputText @bind-Value="Request.Requestor._value" />
    <InputText @bind-Value="Request.Message" aria-placeholder="" />
    <button class="btn btn-primary" @onclick="this.Submit">Schedule</button>
    <SfSchedule TValue="AppointmentData" Height="650px" @bind-SelectedDate="@CurrentDate" @ref="TheScheduler">
        <ScheduleEventSettings DataSource="@DataSource">
            <ScheduleField>
                <FieldEmail Title="Email"></FieldEmail>
                <FieldSubject Title="Subject"></FieldSubject>
                <FieldLocation Title="Meeting Location"></FieldLocation>
                <FieldDescription Title="Comments"></FieldDescription>
                <FieldIsAllDay Title="Full Day"></FieldIsAllDay>
                <FieldStartTime Title="Departure Time"></FieldStartTime>
                <FieldEndTime Title="Arrival Time"></FieldEndTime>
                <FieldStartTimezone Title="Origin"></FieldStartTimezone>
                <FieldEndTimezone Title="Destination"></FieldEndTimezone>
            </ScheduleField>
        </ScheduleEventSettings>
        <ScheduleViews>
            <ScheduleView Option="View.Day"></ScheduleView>
            <ScheduleView Option="View.Week" StartHour="07:00" EndHour="15:00"></ScheduleView>
            <ScheduleView Option="View.WorkWeek" StartHour="10:00" EndHour="18:00"></ScheduleView>
            <ScheduleView Option="View.Month" MaxEventsPerRow="2" ShowWeekend="false"></ScheduleView>
            @* <ScheduleView Option="View.Agenda"></ScheduleView> *@
        </ScheduleViews>
    </SfSchedule>
</EditForm>

@code {
    SfSchedule<AppointmentData> TheScheduler;
    DateTime CurrentDate = new DateTime(2020, 2, 13);
    public class AppointmentData
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string Subject { get; set; }
        public string Description { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public bool IsAllDay { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
    }
    [Inject]
    public ILocalStorageService LocalStorage { get; set; } = null!;
    const string SubmitRequestMeetingUri = "";
    const string QueryAvailableSlotsUri = "";
    MyRequestMeeting Request = new MyRequestMeeting();
    DateRange[] availableSlots = new DateRange[0];
    protected override async Task OnInitializedAsync() => await GetAvailableSlots();
    private async Task GetAvailableSlots() =>
    availableSlots = await Http.GetFromJsonAsync<DateRange[]>(QueryAvailableSlotsUri);
    private async Task Submit()
    {
        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("POST"),
            RequestUri = new Uri(SubmitRequestMeetingUri),
            Content = JsonContent.Create(Request)
        };
        var response = await Http.SendAsync(requestMessage);
        var responseStatusCode = response.StatusCode;
        var responseBody = await response.Content.ReadAsStringAsync();
        @* var tokenResult = await TokenProvider.RequestAccessToken();

            if (tokenResult.TryGetToken(out var token))
            {
            requestMessage.Headers.Authorization =
            new AuthenticationHeaderValue("Bearer", token.Value);

            requestMessage.Content.Headers.TryAddWithoutValidation(
            "x-custom-header", "value");

            var response = await Http.SendAsync(requestMessage);
            var responseStatusCode = response.StatusCode;

            responseBody = await response.Content.ReadAsStringAsync();
            } *@
    }
}