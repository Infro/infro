@page "/scheduleMeeting"
@using System.Net
@inject HttpClient http
@inject ILogger<ScheduleMeeting> log

<PageTitle>Select a date and time and method of contact.</PageTitle>
@* https://blazor.syncfusion.com/documentation/scheduler/editor-template *@
@* Can Import/Export ICS files TheScheudler.Import,,, What about single events? *@
<h1>Schedule</h1>
@* <EditForm> *@
@* <InputText @bind-Value="Request.Requestor._value" />
    <InputText @bind-Value="Request.Message" aria-placeholder="" /> *@
@* <button class="btn btn-primary" @onclick="this.Submit">Schedule</button> *@
@* </EditForm> *@
@* https://blazor.syncfusion.com/documentation/scheduler/events *@
<SfSchedule TValue="AppointmentData" Height="100%" @ref="TheScheduler" EnablePersistence="true"
    @bind-SelectedDate="@SelectedDate" @bind-CurrentView="@CurrentView">
    <ScheduleEvents TValue="AppointmentData" OnActionBegin="OnActionBegin"></ScheduleEvents>
    <ScheduleEventSettings DataSource="@ICalEvents">
        <ScheduleField>
            @* <FieldEmail Title="Email"></FieldEmail> *@
            <FieldSubject Title="Subject"></FieldSubject>
            <FieldLocation Title="E-Mail"></FieldLocation>
            <FieldDescription Title="Comments"></FieldDescription>
            <FieldIsAllDay Title="Full Day"></FieldIsAllDay>
            <FieldStartTime Title="Departure Time"></FieldStartTime>
            <FieldEndTime Title="Arrival Time"></FieldEndTime>
            <FieldStartTimezone Title="Origin"></FieldStartTimezone>
            <FieldEndTimezone Title="Destination"></FieldEndTimezone>
        </ScheduleField>
        @* <SfDataManager AdaptorInstance="@typeof(CustomAdaptor)" Adaptor="Adaptors.CustomAdaptor"></SfDataManager> *@
    </ScheduleEventSettings>
    <ScheduleViews>
        <ScheduleView Option="View.Day" StartHour="07:00" EndHour="18:00"></ScheduleView>
        <ScheduleView Option="View.Week" StartHour="07:00" EndHour="18:00"></ScheduleView>
        <ScheduleView Option="View.WorkWeek" StartHour="07:00" EndHour="18:00"></ScheduleView>
        <ScheduleView Option="View.Month" MaxEventsPerRow="2" ShowWeekend="true"></ScheduleView>
        <ScheduleView Option="View.Year"></ScheduleView>
        @* <ScheduleView Option="View.Agenda"></ScheduleView> *@
    </ScheduleViews>
</SfSchedule>
@code {
    public DateTime SelectedDate = DateTime.Now;
    public View CurrentView = View.Week;

    SfSchedule<AppointmentData> TheScheduler;
    List<AppointmentData> ICalEvents;
    DateTime CurrentDate = new DateTime(2020, 2, 13);
    public class AppointmentData
    {
        public string Id { get; set; }
        public string Email { get; set; }
        public string Subject { get; set; }
        public string Description { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public bool IsAllDay { get; set; }
        public bool IsBlock { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public string? RecurrenceID { get; set; }

        public AppointmentData Clone()
        {
            return new AppointmentData
            {
                Id = this.Id,
                Email = this.Email,
                Subject = this.Subject,
                Description = this.Description,
                Location = this.Location,
                StartTime = this.StartTime,
                EndTime = this.EndTime,
                IsAllDay = this.IsAllDay,
                IsBlock = this.IsBlock,
                RecurrenceRule = this.RecurrenceRule,
                RecurrenceException = this.RecurrenceException,
                RecurrenceID = this. RecurrenceID,
            };
        }
        @* public string CategoryColor { get; set; } *@
    }
    @* [Inject]
        public ILocalStorageService LocalStorage { get; set; } = null!; *@
    const string SubmitRequestMeetingUri = "https://1fk30v89v4.execute-api.us-west-1.amazonaws.com/Prod/api/events";
    const string QueryAvailableSlotsUri = "https://1fk30v89v4.execute-api.us-west-1.amazonaws.com/Prod/api/sync";
    const string QueryMyMeeting = "";


    protected override async Task OnInitializedAsync()
    {
        var ICalEvents = new List<AppointmentData>();
        var myiCal = await http.GetStringAsync(QueryAvailableSlotsUri);

        var calendar = Ical.Net.Calendar.Load(myiCal);
        foreach (var ev in calendar.Events)
        {
            try
            {
                string evRecurrenceRule = string.Empty;
                HashSet<Ical.Net.DataTypes.Occurrence>? occurances = null;
                var x = ev.Properties.Where(prop => prop.Name == "RRULE");
                if (x.Count() == 1)
                {
                    evRecurrenceRule = x.Single().Value.ToString();
                    occurances = ev.GetOccurrences(DateTime.Today.AddDays(-7), DateTime.Today.AddMonths(2));
                }
                var ad = new AppointmentData
                {
                    @* Description = ev.Description ?? "No Description", *@
                    Description = "",
                    Email = "",
                    StartTime = ev.DtStart?.AsSystemLocal ?? DateTime.Today.ToLocalTime(),
                    EndTime = (ev.DtEnd ?? ev.DtStart?.AddHours(1))?.AsSystemLocal ?? DateTime.Today.AddHours(24).ToLocalTime(),
                    Id = string.IsNullOrWhiteSpace(ev.Uid) ? Guid.NewGuid().ToString() : ev.Uid,
                    IsBlock = true,
                    IsAllDay = ev.IsAllDay,
                    Location = ev.Location ?? "",
                    @* RecurrenceException = ev.RecurrenceRules, *@
                    RecurrenceID = ev.Uid ?? "",
                    RecurrenceException = "", //Will Need to be
                    RecurrenceRule = evRecurrenceRule,
                    Subject = ev.Summary ?? "",
                };
                if (occurances != null)
                    foreach (var oc in occurances)
                    {
                        var newad = ad.Clone();
                        newad.StartTime = oc.Period.StartTime.AsSystemLocal;
                        newad.EndTime = oc.Period.EndTime.AsSystemLocal;
                        if(newad.StartTime >= DateTime.Today)
                            ICalEvents.Add(newad);
                    }
                else if(ad.StartTime >= DateTime.Today)
                    ICalEvents.Add(ad);
            }
            catch (Exception ex)
            {
                log.LogError(ex, "Failed to Add something.");
            }
        }
        this.ICalEvents = ICalEvents;
    }
    public async Task OnActionBegin(ActionEventArgs<AppointmentData> args)
    {
        if (args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange || args.ActionType ==
        ActionType.EventRemove)
        {
            @* var checkResult = PostRequest(args).GetAwaiter().GetResult(); *@
            var checkResult = await PostRequest(args);
            if (checkResult != HttpStatusCode.OK)
            {
                log.LogWarning("Failed Request with " + checkResult.ToString());
            }
        }
    }

    private async Task<HttpStatusCode> PostRequest(ActionEventArgs<AppointmentData> args)
    {
        HttpRequestMessage requestMessage = new HttpRequestMessage() { RequestUri = new Uri(SubmitRequestMeetingUri) };
        
        switch (args.ActionType)
        {
            case ActionType.EventCreate:
                requestMessage.Method = new HttpMethod("POST");
                requestMessage.Content = JsonContent.Create(args.AddedRecords[0]);
                break;
            case ActionType.EventChange:
                requestMessage.Method = new HttpMethod("PUT");
                requestMessage.Content = JsonContent.Create(args.ChangedRecords[0]);
                break;
            case ActionType.EventRemove:
                requestMessage.Method = new HttpMethod("DELETE");
                requestMessage.Content = JsonContent.Create(args.DeletedRecords[0]);
                break;
            default:
                return HttpStatusCode.BadRequest;
        }
        var response = await http.SendAsync(requestMessage);
        var responseStatusCode = response.StatusCode;
        var responseBody = await response.Content.ReadAsStringAsync();
        return responseStatusCode;
    }
}
@*
    Microsoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100]
    Unhandled exception rendering component: Index and length must refer to a location within the string. (Parameter
    'length')
    System.ArgumentOutOfRangeException: Index and length must refer to a location within the string. (Parameter 'length')
    at System.String.Substring(Int32 startIndex, Int32 length)
    at Syncfusion.Blazor.Schedule.Internal.ICSImport`1[[infro.github.io.Pages.ScheduleMeeting.AppointmentData,
    infro.github.io, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].GetDateFromString(String input)
    at Syncfusion.Blazor.Schedule.Internal.ICSImport`1[[infro.github.io.Pages.ScheduleMeeting.AppointmentData,
    infro.github.io, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].RenderingImportAppointments(String ical,
    EventFieldsMapping eventFields)
    at
    Syncfusion.Blazor.Schedule.SfSchedule`1.<ImportICalendarAsync>d__280[[infro.github.io.Pages.ScheduleMeeting.AppointmentData,
    infro.github.io, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].MoveNext()
    at infro.github.io.Pages.ScheduleMeeting.OnInitializedAsync() in
    C:\Users\ggwadult\dev\dev.sync\infro.github.io\Pages\ScheduleMeeting.razor:line 84
    at *@
@* 
<table class="table">
    <thead>
        <tr>
            <th>Event</th>
            <th>Start</th>
            <th>End</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in this.ICalEvents)
        {
            <tr>
                <td>@item.Subject</td>
                <td>@item.StartTime.ToString()</td>
                <td>@item.EndTime.ToString()</td>
            </tr>
        }
    </tbody>
</table> *@