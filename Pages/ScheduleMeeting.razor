@page "/scheduleMeeting"
@inject HttpClient http

<PageTitle>Select a date and time and method of contact.</PageTitle>
@* https://blazor.syncfusion.com/documentation/scheduler/editor-template *@
@* Can Import/Export ICS files TheScheudler.Import,,, What about single events? *@
<h1>Schedule</h1>
@* <EditForm> *@
    @* <InputText @bind-Value="Request.Requestor._value" />
    <InputText @bind-Value="Request.Message" aria-placeholder="" /> *@
    <button class="btn btn-primary" @onclick="this.Submit">Schedule</button>
@* </EditForm> *@
@* https://blazor.syncfusion.com/documentation/scheduler/events *@
    <SfSchedule TValue="AppointmentData" Height="100%"
        @ref="TheScheduler"
        EnablePersistence="true"
        @bind-SelectedDate="@SelectedDate"
        @bind-CurrentView="@CurrentView"
        >
        <ScheduleEvents TValue="AppointmentData" OnActionBegin="OnActionBegin"></ScheduleEvents>
        <ScheduleEventSettings DataSource="@DataSource">
            <ScheduleField>
                @* <FieldEmail Title="Email"></FieldEmail> *@
                <FieldSubject Title="Subject"></FieldSubject>
                <FieldLocation Title="E-Mail"></FieldLocation>
                <FieldDescription Title="Comments"></FieldDescription>
                <FieldIsAllDay Title="Full Day"></FieldIsAllDay>
                <FieldStartTime Title="Departure Time"></FieldStartTime>
                <FieldEndTime Title="Arrival Time"></FieldEndTime>
                <FieldStartTimezone Title="Origin"></FieldStartTimezone>
                <FieldEndTimezone Title="Destination"></FieldEndTimezone>
            </ScheduleField>
        </ScheduleEventSettings>
        <ScheduleViews>
            <ScheduleView Option="View.Day" StartHour="07:00" EndHour="18:00"></ScheduleView>
            <ScheduleView Option="View.Week" StartHour="07:00" EndHour="18:00"></ScheduleView>
            <ScheduleView Option="View.WorkWeek" StartHour="07:00" EndHour="18:00"></ScheduleView>
            <ScheduleView Option="View.Month" MaxEventsPerRow="2" ShowWeekend="true"></ScheduleView>
            @* <ScheduleView Option="View.Agenda"></ScheduleView> *@
        </ScheduleViews>
    </SfSchedule>

@code {
    public DateTime SelectedDate = DateTime.Now;
    public View CurrentView = View.Week;

    
    (DateTime, DateTime)[] availableSlots;
    private async Task GetAvailableSlots()
    {
        @* availableSlots = await Http.GetFromJsonAsync<(DateTime, DateTime)[]>(QueryAvailableSlotsUri); *@
       @* var MyEvents = await Http.GetStringAsync("");
        var ImportedEvent = await TheScheduler.ImportICalendarAsync(MyEvents); *@
        @* TheScheduler.ExportToICalendarAsync(null, listOfAppointmentData); *@
        @* DataSource *@
    }
    SfSchedule<AppointmentData> TheScheduler;
    List<AppointmentData> DataSource = new List<AppointmentData>();
    DateTime CurrentDate = new DateTime(2020, 2, 13);
    public class AppointmentData
    {
        public int Id { get; set; }
        public string Email { get; set; }
        public string Subject { get; set; }
        public string Description { get; set; }
        public string Location { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public bool IsAllDay { get; set; }
        public bool IsBlock { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
        @* public string CategoryColor { get; set; } *@
    }
    @* [Inject]
    public ILocalStorageService LocalStorage { get; set; } = null!; *@
    const string SubmitRequestMeetingUri = "";
    const string QueryAvailableSlotsUri = "";
    const string QueryMyMeeting = "";
    
    protected override async Task OnInitializedAsync() {
        var myiCal = await http.GetStringAsync("https://1fk30v89v4.execute-api.us-west-1.amazonaws.com/Prod/api/sync");
        #region Stupid Hack To remove alldayevent.
        var calendar = Ical.Net.Calendar.Load(myiCal);
        calendar.Events.Remove(calendar.Events.Single(o=> o.Uid=="6kojed9m6dimcbb361h3eb9kcpij0bb1ckr32b9ncks68d9l6op36o9j6k@google.com"));
        var myiCal2 = new Ical.Net.Serialization.CalendarSerializer().SerializeToString(calendar);
        #endregion
        await TheScheduler.ImportICalendarAsync(myiCal2);
        foreach(var item in DataSource)
        {
            item.IsBlock = true;
        }
@*         
        System.DateTime DTN = System.DateTime.Today.AddHours(DateTime.Now.Hour);
        await GetAvailableSlots();
        DataSource.Add(new AppointmentData
        {
            Id = 1,
            Subject = "Meeting 1",
            StartTime = DTN,
            EndTime = DTN.AddHours(1),
            IsAllDay = false,
            IsBlock = true,
        });
        DataSource.Add(new AppointmentData
        {
            Id = 2,
            Subject = "Meeting 2",
            StartTime = DTN.AddHours(1),
            EndTime = DTN.AddHours(2),
            IsAllDay = false,
            IsBlock = true,
        });
        DataSource.Add(new AppointmentData
        {
            Id = 3,
            Subject = "Meeting 3",
            StartTime = DTN.AddHours(5),
            EndTime = DTN.AddHours(6),
            IsAllDay = false,
        });
        DataSource.Add(new AppointmentData
        {
            Id = 4,
            Subject = "Meeting 4",
            StartTime = DTN.AddHours(24),
            EndTime = DTN.AddHours(25),
            IsAllDay = false,
            IsBlock = true,
        }); *@
    }
    private async Task Submit()
    {
        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("POST"),
            RequestUri = new Uri(SubmitRequestMeetingUri),
            @* Content = JsonContent.Create(Request) *@
        };
        var response = await http.SendAsync(requestMessage);
        var responseStatusCode = response.StatusCode;
        var responseBody = await response.Content.ReadAsStringAsync();
        @* var tokenResult = await TokenProvider.RequestAccessToken();

            if (tokenResult.TryGetToken(out var token))
            {
            requestMessage.Headers.Authorization =
            new AuthenticationHeaderValue("Bearer", token.Value);

            requestMessage.Content.Headers.TryAddWithoutValidation(
            "x-custom-header", "value");

            var response = await Http.SendAsync(requestMessage);
            var responseStatusCode = response.StatusCode;

            responseBody = await response.Content.ReadAsStringAsync();
            } *@
    }

    public void OnActionBegin(ActionEventArgs<AppointmentData> args)
    {
        if (args.ActionType == ActionType.EventCreate || args.ActionType == ActionType.EventChange || args.ActionType == ActionType.EventRemove)
        {
            @* CreateRequest(args); *@
        }
    }
}
@* 
Microsoft.AspNetCore.Components.WebAssembly.Rendering.WebAssemblyRenderer[100]
      Unhandled exception rendering component: Index and length must refer to a location within the string. (Parameter 'length')
System.ArgumentOutOfRangeException: Index and length must refer to a location within the string. (Parameter 'length')
   at System.String.Substring(Int32 startIndex, Int32 length)
   at Syncfusion.Blazor.Schedule.Internal.ICSImport`1[[infro.github.io.Pages.ScheduleMeeting.AppointmentData, infro.github.io, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].GetDateFromString(String input)
   at Syncfusion.Blazor.Schedule.Internal.ICSImport`1[[infro.github.io.Pages.ScheduleMeeting.AppointmentData, infro.github.io, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].RenderingImportAppointments(String ical, EventFieldsMapping eventFields)
   at Syncfusion.Blazor.Schedule.SfSchedule`1.<ImportICalendarAsync>d__280[[infro.github.io.Pages.ScheduleMeeting.AppointmentData, infro.github.io, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].MoveNext()
   at infro.github.io.Pages.ScheduleMeeting.OnInitializedAsync() in C:\Users\ggwadult\dev\dev.sync\infro.github.io\Pages\ScheduleMeeting.razor:line 84
   at  *@