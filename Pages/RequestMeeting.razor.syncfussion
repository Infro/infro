@page "/scheduleMeeting"
@inject HttpClient Http

<PageTitle>Select a date and time and method of contact.</PageTitle>

<h1>Schedule</h1>
<InputText @bind-Value="Request.Requestor._value" />
<InputText @bind-Value="Request.Message" aria-placeholder="" />
<button class="btn btn-primary" @onclick="this.Submit">Schedule</button>


@code {
    [Inject]
    public ILocalStorageService LocalStorage { get; set; } = null!;
    const string SubmitRequestMeetingUri = "";
    const string QueryAvailableSlotsUri = "";
    MyRequestMeeting Request = new MyRequestMeeting();
    DateRange[] availableSlots = new DateRange[0];
    protected override async Task OnInitializedAsync() => await GetAvailableSlots();
    private async Task GetAvailableSlots() => 
        availableSlots = await Http.GetFromJsonAsync<DateRange[]>(QueryAvailableSlotsUri);
    private async Task Submit()
    {
        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("POST"),
            RequestUri = new Uri(SubmitRequestMeetingUri),
            Content = JsonContent.Create(Request)
        };
        var response = await Http.SendAsync(requestMessage);
        var responseStatusCode = response.StatusCode;
        var responseBody = await response.Content.ReadAsStringAsync();
        @* var tokenResult = await TokenProvider.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token))
        {
            requestMessage.Headers.Authorization =
                new AuthenticationHeaderValue("Bearer", token.Value);

            requestMessage.Content.Headers.TryAddWithoutValidation(
                "x-custom-header", "value");

            var response = await Http.SendAsync(requestMessage);
            var responseStatusCode = response.StatusCode;

            responseBody = await response.Content.ReadAsStringAsync();
        } *@
    }
}